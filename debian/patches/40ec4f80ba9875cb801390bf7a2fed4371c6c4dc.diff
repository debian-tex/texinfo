--- texinfo.orig/tp/Texinfo/Convert/HTML.pm
+++ texinfo/tp/Texinfo/Convert/HTML.pm
@@ -2729,9 +2729,12 @@
   my $with_explanation;
   my $explanation_result;
   my $explanation_string;
-  my $normalized_type
-    = Texinfo::Convert::NodeNameNormalization::normalize_node(
-    {'contents' => $command->{'args'}->[0]->{'contents'}});
+  my $normalized_type = '';
+  if ($command->{'args'}->[0]
+      and $command->{'args'}->[0]->{'contents'}) {
+    $normalized_type = Texinfo::Convert::NodeNameNormalization::normalize_node(
+          {'contents' => $command->{'args'}->[0]->{'contents'}});
+  }
 
   my $explained_commands
     = $self->shared_conversion_state('explained_commands', {});
@@ -4480,7 +4483,8 @@
       $prepended_text = '';
     }
     my $caption_text = '';
-    if ($caption) {
+    if ($caption and $caption->{'args'}->[0]
+        and $caption->{'args'}->[0]->{'contents'}) {
       $caption_text = $self->convert_tree_new_formatting_context(
         {'contents' => $caption->{'args'}->[0]->{'contents'}},
         'float caption');
@@ -4565,10 +4569,13 @@
     # FIXME there is no easy way to mark with a class the @author
     # @-command.  Add a span or a div (@center is in a div)?
     foreach my $author (@{$command->{'extra'}->{'authors'}}) {
-      my $centered_author = $self->gdt("\@center --- \@emph{{author}}\n",
-         {'author' => $author->{'args'}->[0]->{'contents'}});
-      $centered_author->{'parent'} = $command;
-      $attribution .= $self->convert_tree($centered_author, 'convert quotation author');
+      if ($author->{'args'}->[0]
+          and $author->{'args'}->[0]->{'contents'}) {
+        my $centered_author = $self->gdt("\@center --- \@emph{{author}}\n",
+           {'author' => $author->{'args'}->[0]->{'contents'}});
+        $centered_author->{'parent'} = $command;
+        $attribution .= $self->convert_tree($centered_author, 'convert quotation author');
+      }
     }
   }
 
@@ -5806,6 +5813,7 @@
   if ($content =~ /\S/) {
     my $result = '<tr>' . $content . '</tr>';
     if ($element->{'contents'}
+        and scalar(@{$element->{'contents'}})
         and $element->{'contents'}->[0]->{'cmdname'} ne 'headitem') {
       # if headitem, end of line added in _convert_multitable_head_type
       $result .= "\n";
@@ -5906,6 +5914,9 @@
                and $args[0]->{'type'} eq 'menu_entry_description');
       my $arg = shift @args;
       if ($arg->{'type'} and $arg->{'type'} eq 'menu_entry_node') {
+        # $arg->{'contents'} seems to always be defined.  If it is
+        # not the case, it should not be an issue as an undefined
+        # 'contents' is ignored.
         my $name = $self->convert_tree(
            {'type' => '_code', 'contents' => $arg->{'contents'}},
                          "menu_arg menu_entry_node preformatted [$i]");
@@ -9923,8 +9934,10 @@
   foreach my $simpletitle_command ('settitle', 'shorttitlepage') {
     if ($self->{'global_commands'}->{$simpletitle_command}) {
       my $command = $self->{'global_commands'}->{$simpletitle_command};
-      next if ($command->{'extra'}
-               and $command->{'extra'}->{'missing_argument'});
+      next if (!$command->{'args'}
+               or !$command->{'args'}->[0]->{'contents'}
+               or ($command->{'extra'}
+                   and $command->{'extra'}->{'missing_argument'}));
       $self->{'simpletitle_tree'} =
          {'contents' => $command->{'args'}->[0]->{'contents'}};
       $self->{'simpletitle_command_name'} = $simpletitle_command;
--- texinfo.orig/tp/Texinfo/Convert/Plaintext.pm
+++ texinfo/tp/Texinfo/Convert/Plaintext.pm
@@ -3467,13 +3467,18 @@
           $result .= _convert($self, $tree);
         }
       }
-    } elsif (($command eq 'quotation' 
+    } elsif (($command eq 'quotation'
                or $command eq 'smallquotation')
              and $element->{'extra'} and $element->{'extra'}->{'authors'}) {
       foreach my $author (@{$element->{'extra'}->{'authors'}}) {
-        $result .= _convert($self, 
-                 $self->gdt("\@center --- \@emph{{author}}\n",
-                    {'author' => $author->{'args'}->[0]->{'contents'}}));
+        # this cannot happen as this should be caugth by 'missing_argument'
+        # but it is more robust to check anyway
+        if ($author->{'args'}->[0]
+            and $author->{'args'}->[0]->{'contents'}) {
+          $result .= _convert($self,
+                   $self->gdt("\@center --- \@emph{{author}}\n",
+                      {'author' => $author->{'args'}->[0]->{'contents'}}));
+        }
       }
     } elsif (($command eq 'multitable')) {
       $self->{'document_context'}->[-1]->{'in_multitable'}--;
@@ -3499,7 +3504,7 @@
         }
       }
     }
- 
+
     # close the contexts and register the cells
     if ($self->{'preformatted_context_commands'}->{$command}
         or $command eq 'float') {
--- texinfo.orig/tp/t/html_tests.t
+++ texinfo/tp/t/html_tests.t
@@ -552,6 +552,10 @@
 
 @uref{http://example.com/acc_@"a@ogonek{a}}
 '],
+['empty_titlefont',
+'
+@titlefont{}
+'],
 );
 
 my $test_accents_sc_no_brace_commands_quotes = '@u{--a}
--- /dev/null
+++ texinfo/tp/t/results/html_tests/empty_titlefont.pl
@@ -0,0 +1,95 @@
+use vars qw(%result_texis %result_texts %result_trees %result_errors 
+   %result_indices %result_sectioning %result_nodes %result_menus
+   %result_floats %result_converted %result_converted_errors 
+   %result_elements %result_directions_text %result_indices_sort_strings);
+
+use utf8;
+
+$result_trees{'empty_titlefont'} = {
+  'contents' => [
+    {
+      'contents' => [
+        {
+          'text' => '
+',
+          'type' => 'empty_line'
+        },
+        {
+          'args' => [
+            {
+              'type' => 'brace_command_arg'
+            }
+          ],
+          'cmdname' => 'titlefont',
+          'source_info' => {
+            'file_name' => '',
+            'line_nr' => 2,
+            'macro' => ''
+          }
+        },
+        {
+          'text' => '
+'
+        }
+      ],
+      'type' => 'before_node_section'
+    }
+  ],
+  'type' => 'document_root'
+};
+
+$result_texis{'empty_titlefont'} = '
+@titlefont{}
+';
+
+
+$result_texts{'empty_titlefont'} = '
+
+';
+
+$result_errors{'empty_titlefont'} = [];
+
+
+$result_floats{'empty_titlefont'} = {};
+
+
+
+$result_converted{'html'}->{'empty_titlefont'} = '<!DOCTYPE html>
+<html>
+<!-- Created by texinfo, http://www.gnu.org/software/texinfo/ -->
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
+<title>Untitled Document</title>
+
+<meta name="description" content="Untitled Document">
+<meta name="keywords" content="Untitled Document">
+<meta name="resource-type" content="document">
+<meta name="distribution" content="global">
+<meta name="viewport" content="width=device-width,initial-scale=1">
+
+
+
+</head>
+
+<body lang="en">
+
+
+
+
+
+</body>
+</html>
+';
+
+$result_converted_errors{'html'}->{'empty_titlefont'} = [
+  {
+    'error_line' => 'warning: must specify a title with a title command or @top
+',
+    'file_name' => 'empty_titlefont.texi',
+    'text' => 'must specify a title with a title command or @top',
+    'type' => 'warning'
+  }
+];
+
+
+1;
